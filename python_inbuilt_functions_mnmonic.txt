"SPLIT and JOIN: The Separator Connection"

SPLIT:
Think of it as dividing something into parts, like splitting a piece of cake.
Parameters:
Takes a separator as input to determine where to split.
Optionally takes a maximum number of splits.
Usage:
split() -> Split a string into a list of substrings.
Example: sentence.split(" ")
JOIN:
Think of it as bringing things together, like joining pieces of a puzzle.
Parameters:
Takes an iterable (such as a list) as input to join its elements.
No separator needed if the elements are strings.
Usage:
join() -> Join elements of an iterable into a single string.
Example: ", ".join(words)
"MAP and FILTER: Iterative Insights"

MAP:
Think of it as mapping values from one domain to another.
Parameters:
Takes a function and one or more iterables as input.
Usage:
map() -> Apply a function to each item in an iterable.
Example: map(double, numbers)
FILTER:
Think of it as filtering out unwanted elements.
Parameters:
Takes a function and an iterable as input.
Usage:
filter() -> Apply a function to each item in an iterable and return only the items for which the function returns True.
Example: filter(positive, numbers)
"REDUCE: Bringing it all Together"

REDUCE:
Think of it as combining elements to produce a single result.
Parameters:
Takes a function and an iterable as input.
Usage:
reduce() -> Apply a function of two arguments cumulatively to the items of an iterable, from left to right, so as to reduce the iterable to a single value.
Example: reduce(add, numbers)
